/*=====================================================================*/
/*    .../prgm/project/hop/3.0.x/node_modules/hopdoc/lib/hopdoc.js     */
/*    -------------------------------------------------------------    */
/*    Author      :  Manuel Serrano                                    */
/*    Creation    :  Thu Jun 26 08:21:30 2014                          */
/*    Last change :  Fri Dec 18 08:28:37 2015 (serrano)                */
/*    Copyright   :  2014-15 Manuel Serrano                            */
/*    -------------------------------------------------------------    */
/*    HOPDOC, tool kit for generating the hop.js documentation         */
/*=====================================================================*/
"use hopscript"

const md = require( hop.markdown );
const fontifier = require( hop.fontifier );
const _doc = require( "./_hopdoc.hop" );
const fs = require( "fs" );
const path = require( "path" );

/*---------------------------------------------------------------------*/
/*    toc ...                                                          */
/*---------------------------------------------------------------------*/
function toc( doc, clazz = "toc" ) {
   
   function getTags( el ) {
      if( el instanceof Array ) {
	 return Array.prototype.concat.apply( [], el.map( getTags ) );
      }
      
      if( typeof( el ) == "pair" ) {
	 return Array.prototype.concat.apply( [], el.map( getTags ).toArray() );
      }

      if( typeof( el ) == "xml-element" || typeof( el ) == "xml-html" ) {
	 return el.getElementsByClassName( clazz );
      }
      return [];
   }

   return getTags( doc.XML );
}

/*---------------------------------------------------------------------*/
/*    toType ...                                                       */
/*---------------------------------------------------------------------*/
function toType( clazz ) {
   var i = clazz.lastIndexOf( " " );

   if( i ) {
      return clazz.substring( i + 1 );
   } else {
      return clazz;
   }
}

/*---------------------------------------------------------------------*/
/*    index ...                                                        */
/*---------------------------------------------------------------------*/
function index( doc, tags=["h3"], classes=["parameter", "function", "tag", "constructor" ] ) {
   var res = [];

   for( var i = 0; i < classes.length; i++ ) {
      res = res.concat( toc( doc, classes[ i ] ) );
   }

   return res
      .filter( function( el, idx = undefined, arr = undefined ) {
	 return tags.indexOf( el.tagName ) >= 0; } )
      .map( function( el, idx = undefined, arr = undefined ) {
	 var proto = el.innerHTML.trim();
	 var i = proto.indexOf( "." );
	 var key = i >= 0 ? proto.substring( i + 1 ) : proto;

	 key = key.replace( /&[lg]t;/g, "" );
	 key = key.replace( /^new /, "" );
	 var m = key.match( /([^ [(]+)/ );
	 if( m ) key = m[ 1 ];
	 
	 return { key: key,
		  proto: proto,
		  id: el.id,
		  type: toType( el.class ) };
      } );
}

/*---------------------------------------------------------------------*/
/*    DIR ...                                                          */
/*---------------------------------------------------------------------*/
var DIR = path.dirname( module.filename );

/*---------------------------------------------------------------------*/
/*    P ...                                                            */
/*---------------------------------------------------------------------*/
function P( file ) {
   return path.normalize( path.join( DIR, file ) );
}

/*---------------------------------------------------------------------*/
/*    bind dummy xml construct                                         */
/*---------------------------------------------------------------------*/
(function( tags ) {
   function ignore( attr, ... _ ) { return undefined; };

   tags.forEach( function( tag, idx = undefined, arr = undefined ) {
      GLOBAL[ tag ] = ignore;
   } );
})( require( "./xml-ignore.json" ) );

/*---------------------------------------------------------------------*/
/*    htmlToIdx ...                                                    */
/*    -------------------------------------------------------------    */
/*    Generates a JSON index from a collection of HTML files.          */
/*---------------------------------------------------------------------*/
function htmlToIdx( base, files ) {
   var table = [];
   
   for( i = 0; i < files.length; i++ ) {
      var file = files[ i ];
      var xml = require( file, "html" );
      var chapter = path.basename( file, ".html" ).replace( /^[0-9]+-/, "" );

      var idx = index( { XML: xml } )
	  .map( function( e, idx = undefined, arr = undefined ) {
	     e.chapter = chapter;
	     e.url = path.basename( file ) + "#" + e.id;
	     return e;
	  } );

      table = table.concat( idx );
   }
   
   console.log(
      JSON.stringify(
	 table.sort( function( l, r ) {
	    return l.key.toUpperCase().localeCompare( r.key.toUpperCase() ); } ) ) );
}

/*---------------------------------------------------------------------*/
/*    exports                                                          */
/*---------------------------------------------------------------------*/
exports.include = function( file, beg = undefined, end = undefined ) {
   return _doc.include( file, beg, end );
}

exports.BUILDDIR = P( "../../.." );
exports.EXAMPLES_DIR = path.join( exports.BUILDDIR, "examples" );

exports.toc = toc;
exports.index = index;

exports.load = function( file ) {
   return md.load( file, hop.locale, fontifier )
};

exports.eval = function( obj ) {
   return md.eval( obj, hop.locale, fontifier )
};


// public compilers
exports.htmlToIdx = htmlToIdx;
